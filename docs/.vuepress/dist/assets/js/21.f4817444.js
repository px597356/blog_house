(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{424:function(s,e,t){"use strict";t.r(e);var a=t(2),r=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"promise介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise介绍"}},[s._v("#")]),s._v(" Promise介绍")]),s._v(" "),e("h2",{attrs:{id:"promise-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-是什么"}},[s._v("#")]),s._v(" Promise 是什么?")]),s._v(" "),e("p",[e("strong",[s._v("Promise 是 js 中进行异步编程的新的解决方案")])]),s._v(" "),e("h5",{attrs:{id:"什么是异步编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是异步编程"}},[s._v("#")]),s._v(" 什么是异步编程?")]),s._v(" "),e("ul",[e("li",[e("p",[e("strong",[s._v("fs 文件操作")])]),s._v(" "),e("p",[e("code",[s._v("require('fs').readFile('./index.html',(err,data)=>{})")]),s._v(" // 回调写法")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("数据库操作")])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("AJAX")])])])]),s._v(" "),e("p",[s._v("​\t\t"),e("code",[s._v("$.('get',(data)=>{})")]),s._v(" // 回调写法")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("定时器")])])]),s._v(" "),e("p",[s._v("​\t\t"),e("code",[s._v("setTimeout(()=>{},1000)")]),s._v(" // 回调写法")]),s._v(" "),e("p",[s._v("旧的解决方案是单纯使用回调函数")]),s._v(" "),e("h2",{attrs:{id:"为什么要用promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用promise"}},[s._v("#")]),s._v(" 为什么要用Promise")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("制定回调函数的方式更加灵活")]),s._v(" "),e("ol",[e("li",[s._v("旧的： 必须在启动异步任务前指定")]),s._v(" "),e("li",[e("code",[s._v("promise")]),s._v("： 启动异步任务 => 返回"),e("code",[s._v("promise")]),s._v("对象 =>  给"),e("code",[s._v("promise")]),s._v("对象绑定回调函数（甚至可以在异步任务结束后指定/多个）")])])]),s._v(" "),e("li",[e("p",[s._v("支持链式调用，可以解决回调地狱问题")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("什么是回调地狱？")]),s._v(" "),e("p",[s._v("回调函数嵌套调用，外部回调函数异步执行的结果是嵌套的回调执行条件")])]),s._v(" "),e("li",[e("p",[s._v("回调地狱的缺点？")]),s._v(" "),e("p",[s._v("不便于阅读")]),s._v(" "),e("p",[s._v("不便于处理异常")])]),s._v(" "),e("li",[e("p",[s._v("解决方案？")]),s._v(" "),e("p",[e("code",[s._v("promise")]),s._v("链式调用")])])])])]),s._v(" "),e("p",[s._v("回调地狱")]),s._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("asyncFunc1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("opt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("args1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("asyncFunc2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("opt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("args2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("asyncFunc3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("opt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("args3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// some operation")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),e("h5",{attrs:{id:"promise-的状态改变"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-的状态改变"}},[s._v("#")]),s._v(" Promise 的状态改变")]),s._v(" "),e("p",[s._v("实例对象的一个属性【"),e("code",[s._v("PromiseState")]),s._v("】")]),s._v(" "),e("p",[s._v("* "),e("code",[s._v("pending")]),s._v(" 未决定的")]),s._v(" "),e("p",[s._v("* "),e("code",[s._v("resolved")]),s._v(" / "),e("code",[s._v("fulfilled")]),s._v("  成功")]),s._v(" "),e("p",[s._v("* "),e("code",[s._v("rejected")]),s._v("  失败")]),s._v(" "),e("p",[s._v("说明：只有这两种，且一个 "),e("code",[s._v("promise")]),s._v(" 对象只能改变一次")]),s._v(" "),e("p",[s._v("​    无论变为成功还是失败，都会有一个结果数据")]),s._v(" "),e("p",[s._v("​    成功的结果数据一般称为 "),e("code",[s._v("value")]),s._v("，失败的结果数据一般称为 "),e("code",[s._v("reason")])]),s._v(" "),e("h5",{attrs:{id:"promise-对象的值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-对象的值"}},[s._v("#")]),s._v(" Promise 对象的值")]),s._v(" "),e("p",[s._v("实例对象中的另一个属性【"),e("code",[s._v("PromiseResult")]),s._v("】")]),s._v(" "),e("p",[s._v("保存着异步任务【成功/失败】的结果")]),s._v(" "),e("p",[s._v("* "),e("code",[s._v("resolve")])]),s._v(" "),e("p",[s._v("* "),e("code",[s._v("reject")])]),s._v(" "),e("p",[s._v("说明：只有这两种方式可以改变 "),e("code",[s._v("PromiseResult")]),s._v(" 的结果")]),s._v(" "),e("h2",{attrs:{id:"promise-的-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-的-api"}},[s._v("#")]),s._v(" Promise 的 API")]),s._v(" "),e("ul",[e("li",[e("h5",{attrs:{id:"promise-构造函数-promise-executor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-构造函数-promise-executor"}},[s._v("#")]),s._v(" Promise 构造函数：Promise(executor=>{})")]),s._v(" "),e("ul",[e("li",[e("h6",{attrs:{id:"executor-函数-执行器函数-resolve-reject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#executor-函数-执行器函数-resolve-reject"}},[s._v("#")]),s._v(" executor 函数：执行器函数(resolve,reject)=>{}")])]),s._v(" "),e("li",[e("h6",{attrs:{id:"resolve-函数-内部定义成功时我们调用的函数-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#resolve-函数-内部定义成功时我们调用的函数-value"}},[s._v("#")]),s._v(" resolve 函数：内部定义成功时我们调用的函数 value => {}")])]),s._v(" "),e("li",[e("h6",{attrs:{id:"reject-函数-内部定义失败时我们调用的函数-reason"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reject-函数-内部定义失败时我们调用的函数-reason"}},[s._v("#")]),s._v(" reject 函数：内部定义失败时我们调用的函数 reason => {}")])])]),s._v(" "),e("p",[s._v("​       "),e("strong",[s._v("说明：")]),e("code",[s._v("executor")]),s._v(" 会在 "),e("code",[s._v("Promise")]),s._v(" 内部立即同步调用（详见 初步了解Promise.html ---\x3e 41和54、57行打印顺序），异步操作在执行器中执行")])]),s._v(" "),e("li",[e("h5",{attrs:{id:"promise-prototype-then-方法-onresolved-onrejected"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-then-方法-onresolved-onrejected"}},[s._v("#")]),s._v(" Promise.prototype.then 方法：(onResolved, onRejected)=>{}")]),s._v(" "),e("ul",[e("li",[e("h6",{attrs:{id:"onresolved-函数-成功的回调函数-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#onresolved-函数-成功的回调函数-value"}},[s._v("#")]),s._v(" onResolved 函数：成功的回调函数(value) => {}")])]),s._v(" "),e("li",[e("h6",{attrs:{id:"onrejected-函数-失败的回调函数-reason"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#onrejected-函数-失败的回调函数-reason"}},[s._v("#")]),s._v(" onRejected 函数：失败的回调函数 (reason) => {}")]),s._v(" "),e("p",[s._v("**说明：**指定用于得到成功 "),e("code",[s._v("value")]),s._v(" 的成功回调和用于得到失败 "),e("code",[s._v("reason")]),s._v(" 的失败回调")]),s._v(" "),e("p",[s._v("​     返回一个新的 "),e("code",[s._v("promise")]),s._v(" 对象")])])])]),s._v(" "),e("li",[e("h5",{attrs:{id:"promise-prototype-catch-方法-onrejected"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-catch-方法-onrejected"}},[s._v("#")]),s._v(" Promise.prototype.catch 方法：(onRejected)=>{}")]),s._v(" "),e("ul",[e("li",[e("h6",{attrs:{id:"onrejected-函数-失败的回调函数-reason-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#onrejected-函数-失败的回调函数-reason-2"}},[s._v("#")]),s._v(" onRejected 函数：失败的回调函数 (reason) => {}")]),s._v(" "),e("p",[s._v("**说明：**指定用于得到失败 "),e("code",[s._v("reason")]),s._v(" 的失败回调")]),s._v(" "),e("p",[s._v("​     返回一个新的 "),e("code",[s._v("promise")]),s._v(" 对象")])])])]),s._v(" "),e("li",[e("h5",{attrs:{id:"promise-resolve-方法-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-resolve-方法-value"}},[s._v("#")]),s._v(" Promise.resolve 方法：(value)=>{}")]),s._v(" "),e("ul",[e("li",[e("h6",{attrs:{id:"value-成功的数据或-promise-对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#value-成功的数据或-promise-对象"}},[s._v("#")]),s._v(" value：成功的数据或 promise 对象")]),s._v(" "),e("p",[s._v("**说明：**返回一个成功/失败的 "),e("code",[s._v("promise")]),s._v(" 对象")])])])]),s._v(" "),e("li",[e("h5",{attrs:{id:"promise-reject-方法-reason"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-reject-方法-reason"}},[s._v("#")]),s._v(" Promise.reject 方法：(reason)=>{}")]),s._v(" "),e("ul",[e("li",[e("h6",{attrs:{id:"reason-失败的原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reason-失败的原因"}},[s._v("#")]),s._v(" reason: 失败的原因")]),s._v(" "),e("p",[s._v("**说明：**返回一个失败的 "),e("code",[s._v("promise")]),s._v(" 对象, 返回的结果永远都是传入的参数")])])])]),s._v(" "),e("li",[e("h5",{attrs:{id:"promise-all-方法-promises"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-all-方法-promises"}},[s._v("#")]),s._v(" Promise.all 方法：(promises)=>{}")]),s._v(" "),e("ul",[e("li",[e("h6",{attrs:{id:"promises-包含-n-个-promise-的数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promises-包含-n-个-promise-的数组"}},[s._v("#")]),s._v(" promises: 包含 n 个 promise 的数组")]),s._v(" "),e("p",[s._v("**说明：**返回一个新的 promise, 只有所有的 "),e("code",[s._v("promise")]),s._v(" 都成功才成功, 只要有一个失败了就直接失败。")]),s._v(" "),e("p",[e("strong",[s._v("返回的结果值：")]),s._v(" 如果成功, 则返回数组内所有 "),e("code",[s._v("promise")]),s._v(" 的结果; 如果失败, 则返回失败的那个 "),e("code",[s._v("promise")]),s._v("的结果")])])])]),s._v(" "),e("li",[e("h5",{attrs:{id:"promise-race-方法-promises"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-race-方法-promises"}},[s._v("#")]),s._v(" Promise.race 方法：(promises)=>{}")]),s._v(" "),e("ul",[e("li",[e("h6",{attrs:{id:"promises-包含-n-个-promise-的数组-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promises-包含-n-个-promise-的数组-2"}},[s._v("#")]),s._v(" promises: 包含 n 个 promise 的数组")]),s._v(" "),e("p",[s._v("**说明：**返回一个新的 "),e("code",[s._v("promise")]),s._v(", 第一个完成的 "),e("code",[s._v("promise")]),s._v(" 的结果状态就是最终的结果状态返回结果也是第一个完成结束状态的 "),e("code",[s._v("Promise")])])])])])]),s._v(" "),e("h2",{attrs:{id:"promise-关键问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-关键问题"}},[s._v("#")]),s._v(" Promise 关键问题")]),s._v(" "),e("ul",[e("li",[e("h5",{attrs:{id:"改变状态的方法有几种"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#改变状态的方法有几种"}},[s._v("#")]),s._v(" "),e("strong",[s._v("改变状态的方法有几种?")])]),s._v(" "),e("ul",[e("li",[e("h6",{attrs:{id:"回调函数内调用-resolve-方法-使-promise-的状态变成成功"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回调函数内调用-resolve-方法-使-promise-的状态变成成功"}},[s._v("#")]),s._v(" 回调函数内调用 resolve 方法 ---\x3e 使 Promise 的状态变成成功")])]),s._v(" "),e("li",[e("h6",{attrs:{id:"回调函数内调用-reject-方法-使-promise-的状态变成失败"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回调函数内调用-reject-方法-使-promise-的状态变成失败"}},[s._v("#")]),s._v(" 回调函数内调用 reject 方法 ---\x3e 使 Promise 的状态变成失败")])]),s._v(" "),e("li",[e("h6",{attrs:{id:"throw-抛出错误-也会改变-promise-的状态-状态改为失败"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#throw-抛出错误-也会改变-promise-的状态-状态改为失败"}},[s._v("#")]),s._v(" throw 抛出错误, 也会改变 Promise 的状态, 状态改为失败")])])])]),s._v(" "),e("li",[e("h5",{attrs:{id:"一个-promise-指定多个成-失败的回调函数-都会调用吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个-promise-指定多个成-失败的回调函数-都会调用吗"}},[s._v("#")]),s._v(" 一个 Promise 指定多个成/失败的回调函数, 都会调用吗?")]),s._v(" "),e("ul",[e("li",[e("h6",{attrs:{id:"当-promise-状态为对应状态时都会调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#当-promise-状态为对应状态时都会调用"}},[s._v("#")]),s._v(" 当 Promise 状态为对应状态时都会调用")])])])]),s._v(" "),e("li",[e("h5",{attrs:{id:"改变-promise-状态和指定回调函数谁先谁后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#改变-promise-状态和指定回调函数谁先谁后"}},[s._v("#")]),s._v(" 改变 Promise 状态和指定回调函数谁先谁后？")]),s._v(" "),e("ul",[e("li",[e("h6",{attrs:{id:"都有可能-正常情况下是先指定回调再改变状态-但也可以先改状态再指定回调"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#都有可能-正常情况下是先指定回调再改变状态-但也可以先改状态再指定回调"}},[s._v("#")]),s._v(" 都有可能，正常情况下是先指定回调再改变状态，但也可以先改状态再指定回调")])]),s._v(" "),e("li",[e("h6",{attrs:{id:"如何先改变状态再指定回调"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何先改变状态再指定回调"}},[s._v("#")]),s._v(" 如何先改变状态再指定回调？")]),s._v(" "),e("ul",[e("li",[s._v("在执行器中直接调用 "),e("code",[s._v("resolve()")]),s._v("/"),e("code",[s._v("reject()")]),s._v("（执行器函数内是非异步任务）")]),s._v(" "),e("li",[s._v("延迟更长时间才调用"),e("code",[s._v("then()")])])])]),s._v(" "),e("li",[e("h6",{attrs:{id:"什么时候才能得到数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么时候才能得到数据"}},[s._v("#")]),s._v(" 什么时候才能得到数据?")]),s._v(" "),e("ul",[e("li",[s._v("如果先指定的回调，那当状态发生改变时，回调函数就会调用，得到数据")]),s._v(" "),e("li",[s._v("如果先改变的状态，那当指定回调时，回调函数就会调用，得到数据")])])]),s._v(" "),e("li",[e("h6",{attrs:{id:"promise-then-返回的新-promise-的结果状态由什么决定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-then-返回的新-promise-的结果状态由什么决定"}},[s._v("#")]),s._v(" "),e("code",[s._v("promise.then()")]),s._v("返回的新 "),e("code",[s._v("promise")]),s._v(" 的结果状态由什么决定?")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("简单表达：由 "),e("code",[s._v("then()")]),s._v(" 指定的回调函数执行的结果决定")])]),s._v(" "),e("li",[e("p",[s._v("详细表达：")]),s._v(" "),e("ul",[e("li",[s._v("如果抛出异常，新 "),e("code",[s._v("promise")]),s._v(" 变为 "),e("code",[s._v("rejected")]),s._v("，"),e("code",[s._v("reason")]),s._v(" 为抛出的异常")]),s._v(" "),e("li",[s._v("如果返回的是非 "),e("code",[s._v("promise")]),s._v(" 的任意值，新 "),e("code",[s._v("promise")]),s._v(" 变为 "),e("code",[s._v("resolved")]),s._v("，"),e("code",[s._v("value")]),s._v(" 为返回的值")]),s._v(" "),e("li",[s._v("如果返回的是另一个新 "),e("code",[s._v("promise")]),s._v("，此 "),e("code",[s._v("promise")]),s._v(" 的结果就会成为新 "),e("code",[s._v("promise")]),s._v(" 的结果")])]),s._v(" "),e("p",[e("strong",[s._v("代码演示:")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let p = new Promise((resolve, reject)=>{\n    // resolve('ok')\n    reject('error')\n})\n// 执行 then 方法\nlet result = p.then(value =>{\n    // console.log(value);\n    // 1. 抛出错误\n    // throw '出问题了';\n    // 2. 返回结果是非 Promise 类型的对象\n    // return 222;\n    // 3. 返回结果是 Promise 对象\n    return new Promise((resolve, reject) =>{\n        // resolve('success');\n        reject('error')\n    })\n}, reason =>{\n    // return 1111\n    return new Promise((resolve, reject) =>{\n        resolve('success');\n        // reject('error')\n    })\n    // console.log(reason);\n})\nconsole.log(result);\n")])])])])])]),s._v(" "),e("li",[e("h6",{attrs:{id:"promise-如何串联多个操作任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-如何串联多个操作任务"}},[s._v("#")]),s._v(" "),e("code",[s._v("Promise")]),s._v(" 如何串联多个操作任务?")]),s._v(" "),e("ul",[e("li",[e("p",[e("code",[s._v("Promise")]),s._v(" 的 "),e("code",[s._v("then()")]),s._v(" 返回一个新的 "),e("code",[s._v("Promise")]),s._v(", 可以看成 "),e("code",[s._v("then()")]),s._v(" 的链式调用")])]),s._v(" "),e("li",[e("p",[s._v("通过 "),e("code",[s._v("then()")]),s._v(" 的链式调用串联多个同步/异步任务")]),s._v(" "),e("p",[e("strong",[s._v("注意:")]),e("code",[s._v("then")]),s._v(" 方法的返回结果也是 "),e("code",[s._v("promise")]),s._v(" 对象")]),s._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" p "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ok'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\np"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'success'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// undefined 因为没有返回值,所以直接返回成功的 promise 对象, 返回的值就是 undefined")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])])])])]),s._v(" "),e("li",[e("h6",{attrs:{id:"promise-异常穿透"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-异常穿透"}},[s._v("#")]),s._v(" "),e("code",[s._v("promise")]),s._v(" 异常穿透?")]),s._v(" "),e("ul",[e("li",[s._v("当使用 "),e("code",[s._v("promise")]),s._v(" 的 "),e("code",[s._v("then")]),s._v(" 链式调用时，可以在最后指定失败的回调。")]),s._v(" "),e("li",[s._v("前面任何操作出了异常，都会传到最后失败的回调中处理")])])]),s._v(" "),e("li",[e("h6",{attrs:{id:"中断-promise-链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#中断-promise-链"}},[s._v("#")]),s._v(" 中断 promise 链？")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("当使用 "),e("code",[s._v("promise")]),s._v(" 的 "),e("code",[s._v("then")]),s._v(" 链式调用时，在中间中断，不再调用后面的回调函数")]),s._v(" "),e("p",[s._v("**方法：**在回调函数中返回一个 "),e("code",[s._v("pendding")]),s._v(" 状态的 "),e("code",[s._v("promise")]),s._v(" 对象")])])])])])])]),s._v(" "),e("p",[s._v("​")])])}),[],!1,null,null,null);e.default=r.exports}}]);